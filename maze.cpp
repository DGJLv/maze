#include <iostream>
#include <vector>
#include <ctime>
#include <algorithm>
#include <random>
using namespace std;
// odd number of rows and columns
const int ROWS = 21;
const int COLUMNS = 21;
const string WALL = "O";
// path, entrance and exit are expressed as space
const string PATH = " ";
const string ENTRANCE = " ";
const string EXIT = " ";


void displayMaze(vector<vector<string>>& maze){
    // display each element for each column and rows with space
    for(int i = 0; i < ROWS; i++){
        for(int j = 0; j < COLUMNS; j++){
            cout << maze[i][j] << " ";
        }
        cout<<endl;
    }
}

void breakWalls(vector<vector<string>>& maze, int r, int c, int exitR, int exitC){
    // direction of row
    int dr[] = {0, 1, 0, -1}; 
    // direction of column
    int dc[] = {1, 0, -1, 0};
    // vector array for direction
    vector<int> directions = {0, 1, 2, 3};
    // shuffle the directions
    random_shuffle(directions.begin(), directions.end());
    // try for each direction
    for(int i : directions){
    // proceeding two walls by its direction for row and column assigned as nr and nc respectively
    int nr = r + 2 * dr[i];
    int nc = c + 2 * dc[i];
    // if nr and nc is not on the boundary of maze and there is a wall on row of nr and column of nc
    if(nr > 0 && nr < ROWS-1 && nc >0 && nc < COLUMNS-1 && maze[nr][nc] == WALL){
    // change wall as path for two walls with the direction
    maze[nr][nc] = PATH;
    maze[r + dr[i]][c + dc[i]] = PATH;
    // recursion of the function with new parameter of nr and nc which breaking wall from the new point 
    breakWalls(maze, nr, nc, exitR, exitC);
    // if it arrives the exit, return function
    if(nr == exitR && nc == exitC){
        return;
    }
    }
}}



int main(){
    // random number generated by time
    srand(time(NULL));
    // initiate maze 2D array
    vector<vector<string>> maze(ROWS,vector<string>(COLUMNS, WALL));
    // entrance and exit column has to be the odd number
    int entranceC = 1 + 2*(rand() % ((COLUMNS-1)/2));
    int exitC = 1+ 2*(rand() % ((COLUMNS-1)/2));
    // entrance and exits are respectively in the end of the boundaries
    maze[0][entranceC] = ENTRANCE;
    maze[ROWS - 1][exitC] = EXIT;
    // call breakWalls function from second row to last row and generated entrance and exit columns
    breakWalls(maze, 1, entranceC, ROWS - 1, exitC);
    // display the maze
    displayMaze(maze);


}